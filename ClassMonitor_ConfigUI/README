This is the config UI for addon ClassMonitor

***********************************************************************************
***********************************************************************************
***********************************************************************************
New plugin can be added to ClassMonitor using ClassMonitor:NewPlugin  (see public.lua)
You can also add your plugin options definition using ClassMonitor_ConfigUI:NewPluginDefinition

A full sample is provided in ClassMonitor\test\ClassMonitor_TestPlugins

Sample:
-------
local myPluginName = "MYPLUGIN"
local myPlugin = ClassMonitor:NewPlugin(myPluginName) -- create new plugin entry point in ClassMonitor

function myPlugin:Initialize() -- MANDATORY
	-- set default value for self.settings.mypluginfirstoption
	self:UpdateGraphics()
end

function myPlugin:Enable() -- MANDATORY
	-- TODO: register events
	self:RegisterEvent("PLAYER_ENTERING_WORLD", myPlugin.UpdateValue)
end

function myPlugin:Disable() -- MANDATORY
	-- TODO: unregister event, hide GUI
end

function myPlugin:SettingsModified() -- MANDATORY
	-- It's advised to disable plugin before updating GUI
	self:Disable()
	-- update graphics
	self:UpdateGraphics()
	-- Re-enable plugin if it was enabled
	if self.settings.enable then
		self:Enable()
	end
end

-- OWN FUNCTIONS
function myPlugin:UpdateGraphics()
	local bar = self.bar
	if not bar then
		bar = CreateFrame("Frame", self.settings.name, UI.PetBattleHider)
		bar:Hide()
		self.bar = bar
	end
	bar:ClearAllPoints()
	bar:Point(unpack(self.settings.anchor))
	bar:Size(self.settings.width, self.settings.height)
end

function myPlugin:UpdateValue()
	-- update status bar for example
	print("Hellow world!")
	print("VALUE: "..tostring(self.settings.mypluginfirstoption))
end


local myPluginOptions = {
	[1] = ClassMonitor_ConfigUI.Helpers.Name, -- MANDATORY (add .name to settings)
	[2] = ClassMonitor_ConfigUI.Helpers.DisplayName, -- MANDATORY (add .displayName to settings  internal use)
	[3] = ClassMonitor_ConfigUI.Helpers.Kind, -- MANDATORY (add .kind to settings  internal use)
	[4] = ClassMonitor_ConfigUI.Helpers.Enable, -- MANDATORY (add .enable to settings)
	[5] = ClassMonitor_ConfigUI.Helpers.Autohide, -- OPTIONAL (add .autohide to settings)
	[6] = ClassMonitor_ConfigUI.Helpers.WidthAndHeight, -- MANDATORY (add .width and .height to settings)
	[7] = ClassMonitor_ConfigUI.Helpers.Specs, -- OPTIONAL (add .specs to settings)
	[8] = {
		key = "mypluginfirstoption", -- use  self.settings.mypluginfirstoption in plugin methods to access current value
		name = "My Plugin First Option",
		desc = "This is the first option of my own plugin",
		type = "toggle", -- Ace3 option type
		get = ClassMonitor_ConfigUI.Helpers.GetValue, -- generic get value
		set = ClassMonitor_ConfigUI.Helpers.SetValue, -- generic set value
		disabled = ClassMonitor_ConfigUI.Helpers.IsPluginDisabled -- when plugin.enable is false, option is disabled
	},
	[9] = ClassMonitor_ConfigUI.Helpers.Anchor, -- MANDATORY when not in autogrid anchoring mode  (add .anchor to settings)
	[10] = ClassMonitor_ConfigUI.Helpers.AutoGridAnchor, -- MANDATORY when in autogrid anchoring mode (add .verticalIndex and .horizontalIndex    internal use)
	-- add other options
}

local myPluginShortDescription = "Dummy plugin"
local myPluginLongDescription = "Display nothing because it's a dummy plugin :)"

ClassMonitor_ConfigUI:NewPluginDefinition(myPluginName, myPluginOptions, myPluginShortDescription) -- add plugin definition in ClassMonitor_ConfigUI